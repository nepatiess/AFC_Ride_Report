CREATE PROCEDURE SP_FINAL_REPORT
@START_DATE DATETIME = NULL,
@END_DATE DATETIME = NULL,
@REPORT_TYPE VARCHAR(20) = 'ALL', -- 'ALL', 'BOARDING', 'TOPUP'
@CARD_ID INT = NULL,
@CARD_TYPE_ID INT = NULL

AS
BEGIN
    SET NOCOUNT ON;

	-- CTE (COMMON TABLE EXPRESSION)
    ;WITH Combined AS
    (
        -- BOARDING ÝÞLEMLERÝ
        SELECT 
            T.TRANSACTION_ID AS TRANSACTION_ID,
            T.TRANSACTION_DATE AS TRANSACTION_DATE,
            T.CARD_ID,
            'BOARDING' AS TRANSACTION_TYPE,
            -T.SPENT_AMOUNT AS Amount, -- HARCAMA OLD ÝÇÝN NEGATÝF

            -- BOARDING KOLONLARI
            C.CARD_NO,
            CT.CARD_TYPE,
            V.PLATE,
            L.LINE_NAME,

			-- BOARDING'TE CHANNEL, ENSTÝTÜ ADI VE DEALER NAME NULL
            NULL AS CHANNEL,
            NULL AS INSTITUTION_NAME,
            NULL AS DEALER_NAME
        FROM TRANSACTIONS T
        INNER JOIN CARDS C ON T.CARD_ID = C.CARD_ID
        INNER JOIN CARDTYPES CT ON C.CARD_TYPE_ID = CT.CARD_TYPE_ID
        LEFT JOIN VEHICLE V ON T.VEHICLE_ID = V.VEHICLE_ID
        LEFT JOIN LINES L ON V.LINE_ID = L.LINE_ID
        WHERE (@CARD_ID IS NULL OR T.CARD_ID = @CARD_ID)
		AND (@CARD_TYPE_ID IS NULL OR T.CARD_TYPE_ID = @CARD_TYPE_ID)

        UNION ALL

        -- TOPUP ÝÞLEMLERÝ
        SELECT 
            TU.TOP_UP_TRANSACTION_ID,
            TU.TOP_UP_TRANSACTION_DATE,
            TU.CARD_ID,
            'TOPUP' AS TRANSACTION_TYPE,
			TU.TOP_UP_CHANNEL,
            TU.AMOUNT AS AMOUNT, -- YÜKLEME OLD ÝÇÝN POZÝTÝF

            -- TOPUP KOLONLARI
            C.CARD_NO,
            CT.CARD_TYPE,
            NULL AS PLATE,
            NULL AS LINE_NAME,
            TU.TOP_UP_CHANNEL,
            I.INSTITUTION_NAME,
            ISNULL(D.DEALER_NAME,'DIRECT') -- EÐER DEALER NAME NULL ÝSE DÝRECT YAZ
        FROM TOPUPTRANSACTIONS TU
        INNER JOIN CARDS C ON TU.CARD_ID = C.CARD_ID
        INNER JOIN CARDTYPES CT ON C.CARD_TYPE_ID = CT.CARD_TYPE_ID
        LEFT JOIN INSTITUTION I ON TU.INSTITUTION_ID = I.INSTITUTION_ID
        LEFT JOIN DEALER D ON TU.DEALER_ID = D.DEALER_ID
        WHERE (@CARD_ID IS NULL OR TU.CARD_ID = @CARD_ID)
		AND (@CARD_TYPE_ID IS NULL OR C.CARD_TYPE_ID = @CARD_TYPE_ID)

    ),

	-- ORDERED CTE 
    Ordered AS
    (
        SELECT *,
               ROW_NUMBER() OVER (PARTITION BY CARD_ID ORDER BY TRANSACTION_DATE, TRANSACTION_ID) AS rn
        FROM Combined
        WHERE CAST(TRANSACTION_DATE AS DATE) 
              BETWEEN CAST(@START_DATE AS DATE) AND CAST(@END_DATE AS DATE)
    ),
	-- CALCULATED CTE (KRÝTÝK BAKÝYE HESAPLAMA)
    Calc AS
    (
        SELECT 
		-- WINDOWS FUNCTION KULLANIMI 
		-- PARTITION BY CARD: HER KART ÝÇÝN AYRI HESAPLAMA
            O.*,
            SUM(O.AMOUNT) OVER (PARTITION BY O.CARD_ID ORDER BY O.rn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) 
            + C.BALANCE AS RunningBalance
        FROM Ordered O
        INNER JOIN CARDS C ON O.CARD_ID = C.CARD_ID
    )
    SELECT 
        TRANSACTION_TYPE,
        TRANSACTION_ID,
        TRANSACTION_DATE,
        CARD_ID,
        CARD_NO,
        CARD_TYPE,
        PLATE,
        LINE_NAME,
        CHANNEL,
        INSTITUTION_NAME,
        DEALER_NAME,

        -- BOARDING 
        CASE 
            WHEN TRANSACTION_TYPE = 'BOARDING' THEN RunningBalance + (-Amount) 
            ELSE NULL END AS PRE_BALANCE,
        CASE WHEN TRANSACTION_TYPE = 'BOARDING' THEN -Amount ELSE NULL END AS SPENT_AMOUNT,
        CASE WHEN TRANSACTION_TYPE = 'BOARDING' THEN RunningBalance ELSE NULL END AS REMAINING_BALANCE,

        -- TOPUP 
        CASE WHEN TRANSACTION_TYPE = 'TOPUP' THEN Amount ELSE NULL END AS TOP_UP_AMOUNT,
        CASE WHEN TRANSACTION_TYPE = 'TOPUP' THEN RunningBalance ELSE NULL END AS CURRENT_BALANCE
    FROM Calc
    ORDER BY TRANSACTION_DATE, TRANSACTION_ID;
END
